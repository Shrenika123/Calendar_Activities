{"version":3,"sources":["Container/Calender.js","Container/Display.js","Component/Post.js","Container/MyComp.js","App.js","serviceWorker.js","index.js"],"names":["Calender","state","events","start","moment","toDate","end","add","title","str2","includes","replace","arr2","i","this","props","data","length","str1","end_time","str","start_time","a","convertString","b","person","Date","push","console","log","tz","locale","localizer","momentLocalizer","r","showEventHandler","className","defaultDate","defaultView","style","height","Component","Display","view","results","activity_period","toggleHandler","setState","axios","get","id","then","res","activity_periods","showDate","setHours","split","d","f","toString","fontFamily","fontSize","onClick","Post","open","onOpenModal","onCloseModal","font","name","onClose","MyComp","posts","map","post","key","real_name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08434705.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"./Calender.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\n// const g=moment.locale(this.props.tz)\n// const localizer = momentLocalizer(g);\n\nclass Calender extends Component {\n  state = {\n    events: [\n      {\n        start: moment().toDate(),\n        end: moment()\n          .add(0, \"days\")\n          .toDate(),\n        title: \"Some \"\n      }\n    ]\n  };\n\n  convertString(str2){\n      let str3\n    if(str2.includes(\"PM\"))\n    {\n       str3=str2.replace(/PM/g,\" PM\")\n        \n    }\n    else\n    {\n        str3=str2.replace(/AM/g,\" AM\")\n    }\n\nreturn str3\n\n  }\n\n  showEventHandler(){\n    // var arr1=[]\n    var arr2=[]\n\n\n      for(var i=0;i<this.props.data.length;i++)\n      {\n        var str1=this.props.data[i].end_time\n        var str=this.props.data[i].start_time\n      \n        const a=this.convertString(str)\n         const b=this.convertString(str1)\n       \n        var person={\n            start:new Date(a),\n            end:new Date(b),\n            title:\"activity period\"\n        }\n        arr2.push(person)\n      }\n\n    return arr2\n  }\n\n \n\n  render() {\n      console.log(this.props.tz)\n\n      moment.locale(this.props.tz)\nconst localizer = momentLocalizer(moment);\n\n     const r= this.showEventHandler()\n     console.log(r)\n    return (\n      <div className=\"Calender\">\n        <Calendar\n          localizer={localizer}\n          \n          defaultDate={new Date()}\n          defaultView=\"month\"\n          events={r}\n          style={{ height: \"100vh\" }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Calender;","import React,{Component} from 'react'\nimport axios from 'axios'\nimport Calender from './Calender'\n\nclass Display extends Component{\n    state={\n        view:false,\n        results:[],\n        activity_period:\"You were not active\",\n        tz:\"\"\n\n    }\n\n    async componentDidMount(){\n         await axios.get('http://localhost:4000/members/'+this.props.id).then((res)=> this.setState({results:res.data.activity_periods,tz:res.data.tz}))\n        this.showDate()\n    }\n\n    toggleHandler=()=>{\n        this.setState({\n            view:true\n        })\n    }\n\n     showDate(){\n        const a=new Date()\n        a.setHours(0,0,0,0)\n\n        for(var i=0;i<this.state.results.length;i++){\n        let b=this.state.results[i].start_time.split(\" \")\n        let d=b[0]+\" \"+b[1]+\" \"+b[2]\n        let f=new Date(d)\n        console.log(f)\n        console.log(a)\n        if(f.toString()===a.toString()){\n            console.log(this.state.results[i].start_time)\n            this.setState({\n                activity_period:this.state.results[i].start_time.toString()+\" \"+ \"to\"+\" \" +this.state.results[i].end_time.toString()\n            })\n        }\n    }\n    }\n\n    render(){\n        console.log(this.state.tz)\n        if(this.state.view)\n        {\n            return(<div>\n                <Calender data={this.state.results} tz={this.state.tz}/>\n            </div>)\n        }\n        return(\n            <div>\n                <p style={{fontFamily:\"Rufina\",fontSize:\"20px\"}}>Your Activity for today:</p>\n                <p>{this.state.activity_period}</p>\n                <button onClick={this.toggleHandler}>Show All my activities</button>\n                \n            </div>\n        )\n    }\n\n\n}\n\nexport default Display","import React,{Component} from 'react'\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport Display from \"../Container/Display\"\nimport './Post.css'\n\nclass Post extends Component{\n    state={\n        open:false\n    }\n\n    \n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ open: false });\n  };\n\n\n    render() {\n        // console.log(this.props.name)\n        return (\n            <div>\n\n                <p className=\"center\"  style={{font: \"15px\"}} onClick={this.onOpenModal}>{this.props.name}</p>\n\n                <Modal open={this.state.open} onClose={this.onCloseModal}>\n                    <Display id={this.props.id}/>\n                </Modal>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Post;","import React, { Component } from 'react'\nimport Post from '../Component/Post'\nimport axios from 'axios'\n\nclass MyComp extends Component {\n\n    state = {\n        results: []\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/members').then((res) => this.setState({ results: res.data }))\n    }\n\n    render() {\n        const posts = this.state.results.map((post) => {\n            return (\n                <div>\n                    <Post  key={post.id} name={post.real_name} \n                    id={post.id}/>\n                    <br />\n                </div>\n            )\n        })\n        return (\n            <div>\n                {posts}\n            </div>\n        )\n    }\n\n}\n\nexport default MyComp","import React from 'react';\nimport './App.css';\n// import Calender from './Container/Calender'\nimport MyComp from './Container/MyComp'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p className=\"p\" style={{fontSize:\"40px\"}}>Users</p>\n      <MyComp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}